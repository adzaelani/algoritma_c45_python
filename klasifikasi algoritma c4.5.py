# -*- coding: utf-8 -*-
"""OK Algoritma C4.5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NhHtiwgW1EuMDqUIF9FFELiOX6T7uvgJ
"""

#deklarasi library
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn import tree
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
import graphviz
import pandas as ps

#analisis data
dataset = ps.read_csv('v1.csv')
dataset

#cek data yang kosong
dataset.isnull().sum()

#cek tipe data
dataset.info()

#konversi tipe data string ke numerik
le = LabelEncoder()
for column in dataset:
  if dataset[column].dtypes == object:
    dataset[column]=le.fit_transform(dataset[column])

dataset.info()

#memanggil dataset yang telah dikonversi
dataset

#slicing dataset
x = dataset.iloc[:,:-1].values
y = dataset.iloc[:,-1].values

#klasifikasi pohon keputusan
model = tree.DecisionTreeClassifier(random_state=0, max_depth=None, 
                                      min_samples_split=2, min_samples_leaf=1, 
                                      min_weight_fraction_leaf=0, 
                                      max_leaf_nodes=None, 
                                      min_impurity_decrease=0)

#melatih model
clf = model.fit(x, y)

#visualisasi pohon keputusan
dot_data = tree.export_graphviz(model, out_file = None,
                                feature_names = dataset.columns[:-1],
                                max_depth = 4, filled = True)

graph = graphviz.Source(dot_data)

graph.view('pohon keputusan')

#prediksi hasil tes
y_pred = clf.predict(x)

#nilai metiks klasifikasi
akurasi = classification_report(y, y_pred)
print('akurasi :', akurasi)

#nilai akurasi
akurasi = accuracy_score(y, y_pred)
print('nilai akurasi : %d persen'%(akurasi*100))

#nilai presisi
presisi = precision_score(y, y_pred)
print('nilai presisi : %d persen'%(presisi*100))

#nilai recall
recall = recall_score(y, y_pred)
print('nilai recall : %d persen'%(recall*100))

